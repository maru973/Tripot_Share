<article class="pb-4 flex flex-col justify-center">
  <h2 class="grow text-xl md:text-2xl font-bold underline mt-1 md:mt-2 text-center ps-7"><%= @plan.name %>当日のルート</h2>
  <p class="grow text-lg md:text-xl font-bold underline mb-1 md:mb-2 text-center ps-7">（スポットを並び替えてルートを再検索できます）</p>

  <!-- 地図の表示 -->
  <div id="map" class="border w-full h-[250px] md:h-[400px] mt-1"></div>

  <!-- 登録済みリスト -->
  <%= render 'list', ranking_spots: @ranking_spots, spot_subscribers: @spot_subscribers, plan: @plan, start_location: @start_location, end_location: @end_location, course: @course %>

  <!-- 一覧ページボタン --> 
  <div class="flex justify-center mt-3">
    <%= link_to 'プラン詳細', plan_path(@plan), class:"text-base-content btn btn-accent btn-sm md:btn-lg" %>
  </div>
</article>

<script>
  function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
      zoom: 10,
      center: { lat: <%= @start_location.latitude %>, lng: <%= @start_location.longitude %> }, // マップ中央をスタート地点に設定
      mapTypeId: "roadmap",
      disableDefaultUI: true,
      keyboardShortcuts: false,
      mapId: "<%= ENV['GOOGLE_MAP_ID'] %>"
    });

    let directionsService = new google.maps.DirectionsService();

    //ルート描写
    let directionsRenderer = new google.maps.DirectionsRenderer();

    //directionsRenderer と地図を紐付け
    directionsRenderer.setMap(map);

    // wayPointsの初期化
    let wayPoints = new Array();

    console.log(wayPoints);

    function searchRoute(wayPoints, optimizeWaypoints) {
      // ルートを取得するリクエスト
      let request = {
        origin: { placeId: '<%= @start_location.place_id %>' },
        destination: { placeId: '<%= @end_location.place_id %>' },
        travelMode: google.maps.TravelMode.DRIVING, // 車モード
        optimizeWaypoints: optimizeWaypoints, // 最適化を有効か無効にする
        waypoints: wayPoints // 経由地
      };

      directionsService.route(request, function(result, status) {
        if (status === 'OK') {
          directionsRenderer.setDirections(result);
          console.log(result);

          // place_idの配列を抽出
          const placeIds = result.geocoded_waypoints.map(waypoint => waypoint.place_id);

          console.log(placeIds);

          // RailsにPOSTリクエストを送信
          fetch('/courses/<%= @course.id %>/create_position', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify({ place_ids: placeIds })
          })
          .then(response => {
            if (response.ok) {
              console.log("Place IDs sent successfully");
            } else {
              console.error("Failed to send Place IDs");
            }
          });
        } else {
          console.error('Directions request failed due to ' + status);
        }
      });
    }

    const isFirstLoad = sessionStorage.getItem('first_load');

    if (isFirstLoad) {
      const initialWayPoints = JSON.parse('<%= raw @ranking_spots.map { |spot| { place_id: spot.place_id } }.to_json %>').map(spot => ({ location: { placeId: spot.place_id } }));
      searchRoute(initialWayPoints, true); // 初回ロード時は最適化を有効
      sessionStorage.removeItem('first_load');
    } else {
      const initialWayPoints = JSON.parse('<%= raw @ranking_spots.map { |spot| { place_id: spot.place_id } }.to_json %>').map(spot => ({ location: { placeId: spot.place_id } }));
      searchRoute(initialWayPoints, false); // 最適化を無効
    }

    // 再検索ボタンにクリックイベントを追加
    document.getElementById('research-button').addEventListener('click', function() {
      fetch('/courses/<%= @course.id %>/reserach_course')
        .then(response => response.json())
        .then(data => {
          const newWayPoints = data.map(spot => ({ location: { placeId: spot.place_id } }));
          searchRoute(newWayPoints, false);
        });
    });
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLEMAPS_API_KEY']%>&callback=initMap&libraries=places,marker&v=weekly" async defer></script>
