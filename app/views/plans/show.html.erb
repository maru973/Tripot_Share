<article class="pb-4 flex flex-col justify-center">
  <div class="flex items-center">
    <h2 class="grow text-xl md:text-2xl font-bold underline my-1 md:my-2 text-center ps-12 md:ps-10"><%= @plan.name %></h2>

    <% if current_user.present? && current_user.member?(@plan.id) %>
      <div class="twitter mx-3 md:tooltip md:tooltip-left md:tooltip-accent" data-tip="Xに投稿する">
        <%= link_to "https://twitter.com/intent/tweet?url=#{plan_url(@plan)}&text=#{@plan.name}のメンバーになりました！&hashtags=TripotShare", target: '_blank' do %>
          <i class="fa-brands fa-square-x-twitter fa-xl"></i>
        <% end %>
      </div>
      <!-- 追加メニュー -->
      <div class="flex-none dropdown dropdown-end">
        <div tabindex="0" role="button" class="pt-1 md:pr-5">
          <div class="material-symbols-outlined" style= "font-size: 38px;">
            add_box
          </div>
        </div>
        <ul tabindex="0" class="border dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-40 md:w-52">
          <li class="text-xs md:text-lg">
            <%= link_to new_spots_plan_path(@plan), data: { turbo: false } do %>
              <span class= "material-symbols-outlined" style= "font-size: 20px;">
                add_location_alt
              </span>
              スポット追加
            <% end %>
          </li>

          <li class="text-xs md:text-lg">
            <div class="md:tooltip md:tooltip-left md:tooltip-accent" data-tip="登録したスポットの行きたい度合いを選択して投票しよう！メンバーが投票した結果を集計してランキングをつくるよ！">
              <%= link_to plan_spot_points_path(@plan), data: { turbo: false } do %>
                <span class= "material-symbols-outlined" style= "font-size: 20px;">
                  how_to_vote
                </span>
                ランキング投票
              <% end %>
            </div>
          </li>

          <li class="text-xs md:text-lg">
            <div data-controller="modal">
              <%= render template: 'devise/invitations/new', locals: { resource: @user, resource_name: @resource_name } %>
              <%= link_to new_user_invitation_path(id: @plan.id), data: { action: "click->modal#open", turbo_frame: "modal" } do %>
                <span class= "material-symbols-outlined" style= "font-size: 20px;">
                  person_add
                </span>
                メンバー招待
              <% end %>
            </div>
          </li>
        </ul>
      </div>
    <% else %>
      <div class="twitter mx-3 md:tooltip md:tooltip-left md:tooltip-accent" data-tip="Xに投稿する">
        <%= link_to "https://twitter.com/intent/tweet?url=#{plan_url(@plan)}&text=#{@plan.name}をみたよ！みんなもみてね！&hashtags=TripotShare", target: '_blank' do %>
          <i class="fa-brands fa-square-x-twitter fa-xl"></i>
        <% end %>
      </div>
    <% end %>
  </div>

  <!-- 地図の表示 -->
  <div id="map" class="border w-full h-[250px] md:h-[400px] mt-1"></div>

  <!-- 初回のみのモーダル -->
  <div id="explanationModal" class="fixed w-full inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 hidden z-[10]">
    <div class="bg-white p-6 rounded-lg shadow-lg">
      <span id="closeModal" class="float-right cursor-pointer material-symbols-outlined">
        close
      </span>
      <h2 class="text-lg md:text-xl font-bold mb-1 md:mb-4 underline text-center">プランに早速メンバーを<br class="md:hidden" />招待しよう！</h2>
      <p>下のボタンを押して作成された招待リンクから、旅行メンバーをプランに招待できます。</p>
      <p class="mb-3 text-sm md:text-base">※招待メールを送信したい場合は右上にある
        <span class="material-symbols-outlined" style= "font-size: 18px;">
          add_box
        </span>
        から「メンバー招待」を選択して、メールを送信してください。
      </p>
      <%= turbo_frame_tag "invite-link" do %>
        <% if @invite_link.present? %>
          <%= render template: 'plans/invitation' %>
        <% else %>
          <div class="flex justify-center">
            <%= button_to "リンクを生成", invitation_plan_path(params[:id]), class:"text-base-content btn btn-accent" %>
          </div>
        <% end %>
      <% end %>
      <div class="divider"></div> 
      <div class="twitter my-5 flex justify-center">
        <%= link_to "https://twitter.com/intent/tweet?url=#{plan_url(@plan)}&text=#{@plan.name}のメンバーになりました！&hashtags=TripotShare", target: '_blank', class: "btn" do %>
          <i class="fa-brands fa-square-x-twitter fa-xl"></i>
          投稿する
        <% end %>
      </div>
      <p class="text-center">※Xへの投稿ではメンバーの招待はできません。開発者が喜びます。</p>
    </div>
  </div>

  <!-- 登録済みリスト -->
  <%= render 'list_ranking', users: @users, user_spots: @user_spots, plan: @plan, spot_points: @spot_points, ranking_spots: @ranking_spots, spot_subscribers: @spot_subscribers, spot_counter: @spot_counter %>

  <!-- 削除ボタン -->
  <div class="flex justify-around mt-3">
    <% if current_user.present? && current_user.id === @plan.owner_id %>
      <%= link_to t('.destroy'), plan_path(@plan), class:"text-base-content btn btn-error md:btn-lg", data: {turbo_method: :delete, turbo_confirm: "#{@plan.name}を削除しますか" } %>
    <% end %>

    <!-- 一覧ページボタン --> 
    <%= link_to t('.back_index'), plans_path, class:"text-base-content btn btn-accent md:btn-lg" %>
  </div>
</article>



<script>
  // 他のファイルでも使用できるようにfunctionの外側で定義
  let map;

  let markers = [];

  const baseUrl = '<%= request.base_url %>';

  // プランに参加しているメンバーが初めて詳細ページを開くとき、説明モーダルを表示
  <% if current_user.present? && current_user.member?(@plan.id) %>
    document.addEventListener('DOMContentLoaded', function() {
      const modalShown = localStorage.getItem('explanationModal');
      if (!modalShown) {
        showModal();
      }
      function showModal() {
        const modal = document.getElementById('explanationModal');
        modal.classList.remove('hidden');
        // モーダルが表示された後にローカルストレージに値を設定
        localStorage.setItem('explanationModal', 'true');
      }
    });


    document.getElementById('closeModal').addEventListener('click', function() {
      const modal = document.getElementById('explanationModal');
      modal.classList.add('hidden');
    });
  <% end %>

  // マップの初期化設定
  function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
      zoom: 10,
      center:  { lat: <%= @location.latitude %>, lng: <%= @location.longitude %> }, // 地図の中心を指定
      // ストリートビューなど地図右下に表示されていたオプションを削除
      disableDefaultUI: true,
      keyboardShortcuts: false,
      mapId: "<%= ENV['GOOGLE_MAP_ID'] %>"
    });

    // ページリロードしても登録したマーカーが消えない設定
    <% @spots.each do |spot| %>
      (() => {
        let glyphImg = document.createElement("img");

        <% @spot_subscribers[spot.id].each do |user| %>
          let avatarUrl = '<%= user.avatar_url %>'.startsWith('http')
          ? '<%= user.avatar_url %>'
          : new URL('<%= user.avatar_url %>', baseUrl).href;
        <% end %>

        glyphImg.src = avatarUrl;
        glyphImg.className = 'glyph-img';    

        let glyphSvgPinView = new google.maps.marker.PinElement({
          glyph: glyphImg,
          
        });
        const contentString = '<div><%= j render 'spots/modal', spot: spot %></div>';
    
        let infowindow = new google.maps.InfoWindow({
          content: contentString,
          ariaLabel: '<%= spot.name %>',
        });

        let marker = new google.maps.marker.AdvancedMarkerElement({
          map: map,
          position: {lat: <%= spot.latitude %>, lng: <%= spot.longitude %>},
          content: glyphSvgPinView.element,
        });
        marker.id = <%= spot.id %>;
        markers.push(marker);

        marker.addListener("click", () => {
          infowindow.open({
            anchor: marker,
            map,
          });
        });

        // リストのスポット名をクリックするとマップの情報ウィンドウが開く
        let open_infowindow = document.getElementById('infowindow-<%= spot.id %>')
        if (open_infowindow) {
          open_infowindow.addEventListener('click', () => {
            infowindow.open({
              anchor: marker,
              map,
            });
          });
        }

        let rank_infowindow = document.getElementById('rank-infowindow-<%= spot.id %>')
        if (rank_infowindow) {
          rank_infowindow.addEventListener('click', () => {
            infowindow.open({
              anchor: marker,
              map,
            });
          });
        }


        // ウィンドウ以外の場所をクリックしてウィンドウを閉じる処理
        google.maps.event.addListener(map, 'click', function() {
          infowindow.close();
        });
      })();
    <% end %>
  }

  function removeMarker(markerId) {
    // マーカー配列の中から指定されたspot.idのマーカーを探して削除する
    markers = markers.filter(marker => {
      if (marker.id == markerId) {
        marker.setMap(null); // マーカーを地図から削除
        return false; // 配列から削除
      }
      return true; // 配列に残す
    });
  }

</script>
<!-- google mapのスクリプト -->
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLEMAPS_API_KEY']%>&callback=initMap&libraries=places,marker&v=weekly" async defer></script>
